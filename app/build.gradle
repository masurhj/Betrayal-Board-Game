/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id "com.github.spotbugs" version "5.0.6"
    id 'checkstyle'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.5.1'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // EasyMock
    testImplementation 'org.easymock:easymock:4.2'

    implementation 'org.json:json:20211205'
    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    // https://mvnrepository.com/artifact/org.javatuples/javatuples/1.2
    implementation 'org.javatuples:javatuples:1.2'

    // Cucumber
    testImplementation 'io.cucumber:cucumber-java:7.3.1'
    testImplementation 'io.cucumber:cucumber-junit:7.3.1'
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

application {
    // Define the main class for the application.
    mainClass = 'betrayal.gui.Main'
}

checkstyle {
    checkstyleTest.enabled = false
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task cucumber() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [
                    '--plugin', 'pretty',
                    '--plugin', 'html:build/reports/cucumber/index.html',
                    '--glue', 'betrayal.cucumber',
                    'src/test/resources/features/'
            ]
            def jacocoAgent = zipTree(configurations.jacocoAgent.singleFile).filter { it.name == 'jacocoagent.jar' }.singleFile
            jvmArgs = [
                    "-javaagent:${jacocoAgent}=destfile=${buildDir}/jacoco/cucumber.exec"
            ]
        }
    }
}

jacoco {
    toolVersion = "0.7.5.+"
    reportsDirectory = file("${buildDir}/reports/jacoco")
}

jacocoTestReport {
    dependsOn test, cucumber
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    executionData.setFrom fileTree("${buildDir}/jacoco").filter { it.name.endsWith(".exec") }.files
    reports {

        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}
test.finalizedBy(jacocoTestReport)

task codeCoverageInfo {
    dependsOn jacocoTestReport
    ext.srcFile = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    doLast {
        println "Transforming source file."
        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
                false);
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://xml.org/sax/features/namespaces", false)
        def reportNode = parser.parse(srcFile)
        reportNode.children().each {
            if(it.name() == 'counter') {
                String type = it.@type
                float missed = it.@missed as float
                float covered = it.@covered as float
                float percentage = covered / (missed + covered) * 100
                println "Code Coverage[$type]: $percentage%"
            }
        }
    }
}


pitest {
    targetClasses = ['betrayal.board.*', 'betrayal.model.*', 'betrayal.card.*', 'betrayal.controllers.*', 'betrayal.player.*', 'betrayal.rules.*', 'betrayal.*']  //by default "${project.group}.*"
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    junit5PluginVersion = '0.12'
}
// jacocoTestReport.finalizedBy(codeCoverageInfo)